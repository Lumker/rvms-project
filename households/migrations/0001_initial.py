# Generated by Django 4.2.10 on 2025-05-23 14:46

import _core.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('governance', '0004_communityissue_municipalinteraction_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Household',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('household_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('physical_address', models.TextField(help_text='Physical address or description')),
                ('postal_address', models.TextField(blank=True, help_text='Postal address if different')),
                ('gps_coordinates', models.CharField(blank=True, help_text='GPS coordinates (latitude, longitude)', max_length=50)),
                ('housing_type', models.CharField(choices=[('traditional', 'Traditional Dwelling'), ('formal', 'Formal House'), ('informal', 'Informal Dwelling'), ('rondavel', 'Rondavel'), ('apartment', 'Apartment/Flat'), ('backyard_dwelling', 'Backyard Dwelling'), ('hostel', 'Hostel'), ('other', 'Other')], max_length=20)),
                ('land_tenure', models.CharField(choices=[('traditional', 'Traditional/Communal'), ('freehold', 'Freehold'), ('leasehold', 'Leasehold'), ('rental', 'Rental'), ('informal', 'Informal Settlement'), ('government', 'Government Housing'), ('other', 'Other')], max_length=20)),
                ('rooms_count', models.PositiveIntegerField(default=1, help_text='Number of rooms')),
                ('plot_size', models.DecimalField(blank=True, decimal_places=2, help_text='Plot size in square meters', max_digits=10, null=True)),
                ('water_source', models.CharField(choices=[('piped_indoor', 'Piped Water Inside Dwelling'), ('piped_yard', 'Piped Water in Yard'), ('communal_tap', 'Communal Tap'), ('borehole', 'Borehole'), ('well', 'Well'), ('spring', 'Natural Spring'), ('river_dam', 'River/Dam'), ('rainwater', 'Rainwater Harvesting'), ('water_vendor', 'Water Vendor/Tanker'), ('other', 'Other')], max_length=20)),
                ('electricity_source', models.CharField(choices=[('grid', 'Eskom Grid'), ('solar', 'Solar Power'), ('generator', 'Generator'), ('candles', 'Candles'), ('paraffin', 'Paraffin'), ('gas', 'Gas'), ('battery', 'Battery'), ('none', 'No Electricity'), ('other', 'Other')], max_length=20)),
                ('has_toilet', models.BooleanField(default=False)),
                ('toilet_type', models.CharField(blank=True, max_length=100)),
                ('waste_disposal', models.CharField(blank=True, max_length=100)),
                ('estimated_monthly_income', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated total household monthly income', max_digits=10, null=True)),
                ('main_income_source', models.CharField(blank=True, max_length=100)),
                ('established_date', models.DateField(blank=True, help_text='When the household was established', null=True)),
                ('registration_date', models.DateField(auto_now_add=True, help_text='When this record was created')),
                ('verified', models.BooleanField(default=False, help_text='Whether household data has been verified')),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('special_circumstances', models.TextField(blank=True, help_text='Any special circumstances (disability, elderly, child-headed, etc.)')),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_households', to=settings.AUTH_USER_MODEL)),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='households', to='governance.village')),
                ('ward_committee', models.ForeignKey(blank=True, help_text='Ward committee responsible for this household', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='households', to='governance.wardcommittee')),
            ],
            options={
                'ordering': ['household_id'],
            },
        ),
        migrations.CreateModel(
            name='Resident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id_number', models.CharField(help_text='South African ID Number (13 digits)', max_length=13, unique=True, validators=[_core.validators.validate_sa_id_number])),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('is_head_of_household', models.BooleanField(default=False)),
                ('relationship_to_head', models.CharField(blank=True, help_text='Relationship to household head (spouse, child, parent, etc.)', max_length=50)),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Enter a valid South African phone number. Format: +27XXXXXXXXX or 0XXXXXXXXX', regex='^(\\+27|0)[6-8][0-9]{8}$')])),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('alternative_contact', models.CharField(blank=True, max_length=255)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed'), ('separated', 'Separated'), ('cohabiting', 'Cohabiting')], max_length=20)),
                ('education_level', models.CharField(blank=True, choices=[('none', 'No Formal Education'), ('primary_incomplete', 'Primary Incomplete'), ('primary_complete', 'Primary Complete'), ('secondary_incomplete', 'Secondary Incomplete'), ('matric', 'Matric/Grade 12'), ('tertiary_diploma', 'Diploma/Certificate'), ('degree', 'University Degree'), ('postgraduate', 'Postgraduate')], max_length=30)),
                ('employment_status', models.CharField(blank=True, choices=[('employed_formal', 'Employed (Formal)'), ('employed_informal', 'Employed (Informal)'), ('self_employed', 'Self Employed'), ('unemployed', 'Unemployed'), ('student', 'Student'), ('pensioner', 'Pensioner'), ('homemaker', 'Homemaker'), ('disabled', 'Unable to Work (Disability)'), ('other', 'Other')], max_length=30)),
                ('occupation', models.CharField(blank=True, max_length=100)),
                ('employer', models.CharField(blank=True, max_length=100)),
                ('monthly_income', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('receives_grants', models.BooleanField(default=False)),
                ('grant_types', models.CharField(blank=True, help_text='Types of grants received (comma-separated)', max_length=255)),
                ('grant_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total monthly grant amount', max_digits=10, null=True)),
                ('has_disability', models.BooleanField(default=False)),
                ('disability_type', models.CharField(blank=True, max_length=100)),
                ('chronic_illnesses', models.TextField(blank=True)),
                ('special_needs', models.TextField(blank=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='resident_photos/')),
                ('id_document', models.FileField(blank=True, null=True, upload_to='resident_documents/')),
                ('is_active', models.BooleanField(default=True, help_text='Whether resident still lives in this household')),
                ('date_moved_in', models.DateField(blank=True, null=True)),
                ('date_moved_out', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='residents', to='households.household')),
                ('user_account', models.OneToOneField(blank=True, help_text='Linked system user account if resident has access', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resident_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
                'indexes': [models.Index(fields=['household', 'is_active'], name='households__househo_ff9ad2_idx'), models.Index(fields=['id_number'], name='households__id_numb_37f63d_idx'), models.Index(fields=['is_head_of_household'], name='households__is_head_5296b0_idx'), models.Index(fields=['employment_status'], name='households__employm_be3faf_idx')],
            },
        ),
        migrations.CreateModel(
            name='HouseholdService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service_type', models.CharField(choices=[('water', 'Water Supply'), ('electricity', 'Electricity'), ('sanitation', 'Sanitation'), ('waste', 'Waste Collection'), ('healthcare', 'Healthcare'), ('education', 'Education'), ('transport', 'Public Transport'), ('communication', 'Communication/Internet')], max_length=20)),
                ('status', models.CharField(choices=[('available', 'Available'), ('partial', 'Partially Available'), ('unavailable', 'Not Available'), ('planned', 'Planned'), ('under_construction', 'Under Construction')], max_length=20)),
                ('quality_rating', models.PositiveIntegerField(blank=True, help_text='Quality rating 1-5 (5 being excellent)', null=True)),
                ('distance_to_service', models.DecimalField(blank=True, decimal_places=2, help_text='Distance to service in kilometers', max_digits=6, null=True)),
                ('monthly_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly cost for this service', max_digits=8, null=True)),
                ('notes', models.TextField(blank=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='households.household')),
            ],
            options={
                'ordering': ['household', 'service_type'],
                'unique_together': {('household', 'service_type')},
            },
        ),
        migrations.AddIndex(
            model_name='household',
            index=models.Index(fields=['village', 'is_active'], name='households__village_8484a4_idx'),
        ),
        migrations.AddIndex(
            model_name='household',
            index=models.Index(fields=['ward_committee', 'is_active'], name='households__ward_co_43ba34_idx'),
        ),
        migrations.AddIndex(
            model_name='household',
            index=models.Index(fields=['housing_type'], name='households__housing_71e0d1_idx'),
        ),
    ]
